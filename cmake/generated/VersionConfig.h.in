#ifndef VERSION_CONFIG_H
#define VERSION_CONFIG_H

#include <string>

// define your version_lib interface
#define VERSION_STR "@PROJECT_VERSION_STRING@"

#define PROJECT_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@"
#define PROJECT_VERSION_MINOR "@PROJECT_VERSION_MINOR@"
#define PROJECT_VERSION_MICRO "@PROJECT_VERSION_MICRO@"

#define PROJECT_VERSION_TAG "@PROJECT_VERSION_TAG@"
#define PROJECT_VERSION_POST_NB "@PROJECT_VERSION_POST_NB@"
#define PROJECT_VERSION_POST_COMMIT "@PROJECT_VERSION_POST_COMMIT@"
#define PROJECT_VERSION_BRANCH "@PROJECT_VERSION_BRANCH@"


namespace GundamVersionConfig{

  inline std::string getVersionStr(){ return {VERSION_STR}; }

  inline std::string getVersionMajor(){ return {PROJECT_VERSION_MAJOR}; }
  inline std::string getVersionMinor(){ return {PROJECT_VERSION_MINOR}; }
  inline std::string getVersionMicro(){ return {PROJECT_VERSION_MICRO}; }

  inline std::string getVersionTag(){ return {PROJECT_VERSION_TAG}; }
  inline std::string getVersionPostCommitNb(){ return {PROJECT_VERSION_POST_NB}; }
  inline std::string getVersionPostCommitHash(){ return {PROJECT_VERSION_POST_COMMIT}; }
  inline std::string getVersionBranch(){ return {PROJECT_VERSION_BRANCH}; }

}

#endif // VERSION_CONFIG_H